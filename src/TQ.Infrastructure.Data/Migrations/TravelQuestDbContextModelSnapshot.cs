// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TQ.Infrastructure.Data.TravelQuestDb;

#nullable disable

namespace TQ.Infrastructure.Data.Migrations
{
    [DbContext(typeof(TravelQuestDbContext))]
    partial class TravelQuestDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TQ.Core.Aggregates.CPVisitsAggregate.CPVisit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CPId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<bool>("IsValid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("TeamId")
                        .HasColumnType("integer");

                    b.Property<long>("VisitTime")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CPId");

                    b.HasIndex("TeamId");

                    b.ToTable("CPVisits");
                });

            modelBuilder.Entity("TQ.Core.Aggregates.CPsAggregate.CP", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Legend")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("CPs");
                });

            modelBuilder.Entity("TQ.Core.Aggregates.CPsRunsAggregate.CPRun", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CPId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<string>("RunId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<int>("Scores")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("CPId");

                    b.HasIndex("RunId", "CPId")
                        .IsUnique();

                    b.ToTable("CPsRuns");
                });

            modelBuilder.Entity("TQ.Core.Aggregates.RunsAggregate.Run", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<long>("Duration")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("RunStart")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("RunStart");

                    b.ToTable("Runs");
                });

            modelBuilder.Entity("TQ.Core.Aggregates.TeamResultsAggregate.TeamResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("ElapsedTime")
                        .HasColumnType("bigint");

                    b.Property<int>("Penalty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("TeamId")
                        .HasColumnType("integer");

                    b.Property<int>("TotalScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamResults");
                });

            modelBuilder.Entity("TQ.Core.Aggregates.TeamsAggregate.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Area")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Group")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RunId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.HasKey("Id");

                    b.HasIndex("RunId", "Code")
                        .IsUnique();

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("TQ.Core.Aggregates.UsersAggregate.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Code")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TQ.Core.Aggregates.CPVisitsAggregate.CPVisit", b =>
                {
                    b.HasOne("TQ.Core.Aggregates.CPsAggregate.CP", null)
                        .WithMany()
                        .HasForeignKey("CPId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TQ.Core.Aggregates.TeamsAggregate.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TQ.Core.Aggregates.CPsRunsAggregate.CPRun", b =>
                {
                    b.HasOne("TQ.Core.Aggregates.CPsAggregate.CP", null)
                        .WithMany()
                        .HasForeignKey("CPId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TQ.Core.Aggregates.RunsAggregate.Run", null)
                        .WithMany()
                        .HasForeignKey("RunId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TQ.Core.Aggregates.TeamResultsAggregate.TeamResult", b =>
                {
                    b.HasOne("TQ.Core.Aggregates.TeamsAggregate.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TQ.Core.Aggregates.TeamsAggregate.Team", b =>
                {
                    b.HasOne("TQ.Core.Aggregates.RunsAggregate.Run", null)
                        .WithMany()
                        .HasForeignKey("RunId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TQ.Core.Aggregates.UsersAggregate.User", b =>
                {
                    b.HasOne("TQ.Core.Aggregates.TeamsAggregate.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
